/////////////////////////////////////////////////////////////////morteza mahdi zadeh
/////////////////////////////////////////////////////////////////4012023030
import com.mysql.cj.jdbc.DatabaseMetaData;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

public class Important extends javax.swing.JFrame {

    /**
     * Creates new form Important
     */
    public Important(){
        initComponents();
    }
    public Important(String SignUpEmail) {
        initComponents();
        accountName_l.setText(SignUpEmail);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        important_table = new javax.swing.JTable();
        ok_b = new javax.swing.JButton();
        accountName_l = new javax.swing.JLabel();
        remove_b = new javax.swing.JButton();
        see_b = new javax.swing.JButton();
        seeError_l = new javax.swing.JLabel();
        remove_l = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(229, 229, 229));

        important_table.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 18)); // NOI18N
        important_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "From/To", "Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        important_table.setRowHeight(30);
        jScrollPane1.setViewportView(important_table);

        ok_b.setBackground(new java.awt.Color(255, 255, 255));
        ok_b.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 24)); // NOI18N
        ok_b.setText("Ok");
        ok_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_bActionPerformed(evt);
            }
        });

        accountName_l.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 24)); // NOI18N
        accountName_l.setForeground(new java.awt.Color(252, 163, 17));

        remove_b.setBackground(new java.awt.Color(255, 255, 255));
        remove_b.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 24)); // NOI18N
        remove_b.setText("Remove");
        remove_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_bActionPerformed(evt);
            }
        });

        see_b.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 24)); // NOI18N
        see_b.setText("See");
        see_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                see_bActionPerformed(evt);
            }
        });

        seeError_l.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        seeError_l.setForeground(new java.awt.Color(230, 55, 69));

        remove_l.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 12)); // NOI18N
        remove_l.setForeground(new java.awt.Color(230, 55, 69));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                    .addComponent(accountName_l, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ok_b, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(98, 98, 98)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(seeError_l, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(see_b, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(remove_b, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(remove_l, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountName_l, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(seeError_l, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remove_l, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ok_b, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(remove_b, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(see_b, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        
        DefaultTableModel tblmodel1 = (DefaultTableModel) important_table.getModel();
        TableColumnModel columnModel = important_table.getColumnModel();
        String user = accountName_l.getText().substring(0, accountName_l.getText().indexOf('@'));
        int range = 0;
        Connection c;
        try {
            // an object for connect to sql
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/emails" , "root" , "363831");
            Statement st = c.createStatement();
                // take count of rows in user sql important_user table
            ResultSet rs2 = st.executeQuery("SELECT COUNT(*) FROM important_" + user);
            if (rs2.next()) {
                range = rs2.getInt(1);
            }
                
            String[][] values2 = new String[2*range][3];
            int num1 = 0;
            // take records in each row
            ResultSet rs = st.executeQuery("SELECT * FROM important_" + user);
               
            while (num1<2*range && rs.next()) {
                values2[num1][0] = rs.getString("sender");
                values2[num1][1] = rs.getString("subject");
            num1++;

            }
            
            // make rows in java important_user table
            for (int i = 0 ; i<range ; i++) {
                tblmodel1.addRow(values2[i]);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Sent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void ok_bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_bActionPerformed
        // TODO add your handling code here:
        Inbox i = new Inbox(accountName_l.getText());
        i.setVisible(true);
        dispose();
    }//GEN-LAST:event_ok_bActionPerformed

    private void see_bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_see_bActionPerformed
        // TODO add your handling code here:
        
        // create an object for important_user table
        DefaultTableModel tblmodel = (DefaultTableModel) important_table.getModel();
        String user = accountName_l.getText().substring(0, accountName_l.getText().indexOf('@'));
        int row = important_table.getSelectedRow();
        Connection c;
        try {
            // connect to sql
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/emails" , "root" , "363831");
            Statement st = c.createStatement();
            DatabaseMetaData dbm = (DatabaseMetaData) c.getMetaData();
            // is exist this table or no !?
            ResultSet tables = dbm.getTables(null, null, user, null);
            if (tables.next()) {
                if (row == -1 ) {
                    seeError_l.setText("please selecet a row !");
                    Timer t = new Timer (1000 , new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            seeError_l.setText("");
                            }
                    });
                t.start();
                    
                }
                else {
                    seeError_l.setText("");
                    // recieve values from java important_user table in a special row
                    String from = (String) tblmodel.getValueAt(row, 0);
                    String subject = (String) tblmodel.getValueAt(row, 1);
                    String message = null;
                    // recieve message record from sql importanat_user table
                    ResultSet rs = st.executeQuery("SELECT * FROM important_" + user + " WHERE sender = '" + from + "' AND subject = '" + subject + "'");
                    // save this record on string message
                    if (rs.next()) {
                        message = rs.getString("message");
                    }
                    // make an object for class see and set it visible
                    SeeForImportant sfi = new SeeForImportant(from , subject , message , accountName_l.getText());
                    sfi.setVisible(true);
                }
                
            }
            else {
                seeError_l.setText("there is no message in important table !");
                Timer t = new Timer (1000 , new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            seeError_l.setText("");
                            }
                    });
                t.start();
            }   
        } catch (SQLException ex) {
            Logger.getLogger(Sent.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_see_bActionPerformed

    private void remove_bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_bActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblmodel = (DefaultTableModel) important_table.getModel();
        int row = important_table.getSelectedRow();
        
        String user = accountName_l.getText().substring(0, accountName_l.getText().indexOf('@'));
        
        Connection c;
        try {
                c = DriverManager.getConnection("jdbc:mysql://localhost:3306/emails" , "root" , "363831");
                Statement st = c.createStatement();
                DatabaseMetaData dbm = (DatabaseMetaData) c.getMetaData();
                ResultSet tables = dbm.getTables(null, null, "important_" +user, null);
                if (tables.next()) {
                    if (row == -1) {
                        remove_l.setText("please select a row !");
                        Timer t = new Timer (1000 , new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            remove_l.setText("");
                            }
                    });
                t.start();
                    }
                    else {
                        remove_l.setText("");
                        String value1 = tblmodel.getValueAt(row, 0).toString();
                        String value2 = tblmodel.getValueAt(row, 1).toString();
                        // remmove selected row from sql table
                        st.executeUpdate("DELETE FROM important_" + user + " WHERE sender LIKE '" + value1 + "' AND subject LIKE '" + value2 + "'");
                        // remove selected row from java table
                        tblmodel.removeRow(row);
                    }
            }
                else {
                    remove_l.setText("there is no email in important !");
                    Timer t = new Timer (1000 , new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            remove_l.setText("");
                            }
                    });
                t.start();
                }
        } catch (SQLException ex) {
            Logger.getLogger(Sent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_remove_bActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Important.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Important.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Important.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Important.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Important().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountName_l;
    private javax.swing.JTable important_table;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton ok_b;
    private javax.swing.JButton remove_b;
    private javax.swing.JLabel remove_l;
    private javax.swing.JLabel seeError_l;
    private javax.swing.JButton see_b;
    // End of variables declaration//GEN-END:variables
}
